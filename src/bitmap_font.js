
export default function make_ascii_sprite_sheet(from = 0, to = 256) {
    const BITMAP_WIDTH = 8;
    const BITMAP_HEIGHT = 5;

    const SPRITE_WIDTH = 5;
    const SPRITE_HEIGHT = 8;

    const packed_bitmap = new Uint8Array([
        0x00, 0x00, 0x00, 0x00, 0x00,  // char. 0
        0x3E, 0x5B, 0x4F, 0x5B, 0x3E,  // char. 1
        0x3E, 0x6B, 0x4F, 0x6B, 0x3E,  // char. 2
        0x1C, 0x3E, 0x7C, 0x3E, 0x1C,  // char. 3
        0x18, 0x3C, 0x7E, 0x3C, 0x18,  // char. 4
        0x1C, 0x57, 0x7D, 0x57, 0x1C,  // char. 5
        0x1C, 0x5E, 0x7F, 0x5E, 0x1C,  // char. 6
        0x00, 0x18, 0x3C, 0x18, 0x00,  // char. 7
        0xFF, 0xE7, 0xC3, 0xE7, 0xFF,  // char. 8
        0x00, 0x18, 0x24, 0x18, 0x00,  // char. 9
        0xFF, 0xE7, 0xDB, 0xE7, 0xFF,  // char. 10
        0x30, 0x48, 0x3A, 0x06, 0x0E,  // char. 11
        0x26, 0x29, 0x79, 0x29, 0x26,  // char. 12
        0x40, 0x7F, 0x05, 0x05, 0x07,  // char. 13
        0x40, 0x7F, 0x05, 0x25, 0x3F,  // char. 14
        0x5A, 0x3C, 0xE7, 0x3C, 0x5A,  // char. 15
        0x7F, 0x3E, 0x1C, 0x1C, 0x08,  // char. 16
        0x08, 0x1C, 0x1C, 0x3E, 0x7F,  // char. 17
        0x14, 0x22, 0x7F, 0x22, 0x14,  // char. 18
        0x5F, 0x5F, 0x00, 0x5F, 0x5F,  // char. 19
        0x06, 0x09, 0x7F, 0x01, 0x7F,  // char. 20
        0x00, 0x66, 0x89, 0x95, 0x6A,  // char. 21
        0x60, 0x60, 0x60, 0x60, 0x60,  // char. 22
        0x94, 0xA2, 0xFF, 0xA2, 0x94,  // char. 23
        0x08, 0x04, 0x7E, 0x04, 0x08,  // char. 24
        0x10, 0x20, 0x7E, 0x20, 0x10,  // char. 25
        0x08, 0x08, 0x2A, 0x1C, 0x08,  // char. 26
        0x08, 0x1C, 0x2A, 0x08, 0x08,  // char. 27
        0x1E, 0x10, 0x10, 0x10, 0x10,  // char. 28
        0x0C, 0x1E, 0x0C, 0x1E, 0x0C,  // char. 29
        0x30, 0x38, 0x3E, 0x38, 0x30,  // char. 30
        0x06, 0x0E, 0x3E, 0x0E, 0x06,  // char. 31
        0x00, 0x00, 0x00, 0x00, 0x00,  // char. 32 space
        0x00, 0x00, 0x5F, 0x00, 0x00,  // char. 33  !
        0x00, 0x07, 0x00, 0x07, 0x00,  // char. 34  "
        0x14, 0x7F, 0x14, 0x7F, 0x14,  // char. 35  #
        0x24, 0x2A, 0x7F, 0x2A, 0x12,  // char. 36  $
        0x23, 0x13, 0x08, 0x64, 0x62,  // char. 37  %
        0x36, 0x49, 0x56, 0x20, 0x50,  // char. 38  &
        0x00, 0x08, 0x07, 0x03, 0x00,  // char. 39  '
        0x00, 0x1C, 0x22, 0x41, 0x00,  // char. 40  (
        0x00, 0x41, 0x22, 0x1C, 0x00,  // char. 41  )
        0x2A, 0x1C, 0x7F, 0x1C, 0x2A,  // char. 42  *
        0x08, 0x08, 0x3E, 0x08, 0x08,  // char. 43  +
        0x00, 0x80, 0x70, 0x30, 0x00,  // char. 44  ,
        0x08, 0x08, 0x08, 0x08, 0x08,  // char. 45  -
        0x00, 0x00, 0x60, 0x60, 0x00,  // char. 46  .
        0x20, 0x10, 0x08, 0x04, 0x02,  // char. 47  /
        0x3E, 0x51, 0x49, 0x45, 0x3E,  // char. 48  0
        0x00, 0x42, 0x7F, 0x40, 0x00,  // char. 49  1
        0x72, 0x49, 0x49, 0x49, 0x46,  // char. 50  2
        0x21, 0x41, 0x49, 0x4D, 0x33,  // char. 51  3
        0x18, 0x14, 0x12, 0x7F, 0x10,  // char. 52  4
        0x27, 0x45, 0x45, 0x45, 0x39,  // char. 53  5
        0x3C, 0x4A, 0x49, 0x49, 0x31,  // char. 54  6
        0x41, 0x21, 0x11, 0x09, 0x07,  // char. 55  7
        0x36, 0x49, 0x49, 0x49, 0x36,  // char. 56  8
        0x46, 0x49, 0x49, 0x29, 0x1E,  // char. 57  9
        0x00, 0x00, 0x14, 0x00, 0x00,  // char. 58  :
        0x00, 0x40, 0x34, 0x00, 0x00,  // char. 59  ;
        0x00, 0x08, 0x14, 0x22, 0x41,  // char. 60  <
        0x14, 0x14, 0x14, 0x14, 0x14,  // char. 61  =
        0x00, 0x41, 0x22, 0x14, 0x08,  // char. 62  >
        0x02, 0x01, 0x59, 0x09, 0x06,  // char. 63  ?
        0x3E, 0x41, 0x5D, 0x59, 0x4E,  // char. 64  @
        0x7C, 0x12, 0x11, 0x12, 0x7C,  // char. 65  A
        0x7F, 0x49, 0x49, 0x49, 0x36,  // char. 66  B
        0x3E, 0x41, 0x41, 0x41, 0x22,  // char. 67  C
        0x7F, 0x41, 0x41, 0x41, 0x3E,  // char. 68  D
        0x7F, 0x49, 0x49, 0x49, 0x41,  // char. 69  E
        0x7F, 0x09, 0x09, 0x09, 0x01,  // char. 70  F
        0x3E, 0x41, 0x41, 0x51, 0x73,  // char. 71  G
        0x7F, 0x08, 0x08, 0x08, 0x7F,  // char. 72  H
        0x00, 0x41, 0x7F, 0x41, 0x00,  // char. 73  I
        0x20, 0x40, 0x41, 0x3F, 0x01,  // char. 74  J
        0x7F, 0x08, 0x14, 0x22, 0x41,  // char. 75  K
        0x7F, 0x40, 0x40, 0x40, 0x40,  // char. 76  L
        0x7F, 0x02, 0x1C, 0x02, 0x7F,  // char. 77  M
        0x7F, 0x04, 0x08, 0x10, 0x7F,  // char. 78  N
        0x3E, 0x41, 0x41, 0x41, 0x3E,  // char. 79  O
        0x7F, 0x09, 0x09, 0x09, 0x06,  // char. 80  P
        0x3E, 0x41, 0x51, 0x21, 0x5E,  // char. 81  Q
        0x7F, 0x09, 0x19, 0x29, 0x46,  // char. 82  R
        0x26, 0x49, 0x49, 0x49, 0x32,  // char. 83  S
        0x03, 0x01, 0x7F, 0x01, 0x03,  // char. 84  T
        0x3F, 0x40, 0x40, 0x40, 0x3F,  // char. 85  U
        0x1F, 0x20, 0x40, 0x20, 0x1F,  // char. 86  V
        0x3F, 0x40, 0x38, 0x40, 0x3F,  // char. 87  W
        0x63, 0x14, 0x08, 0x14, 0x63,  // char. 88  X
        0x03, 0x04, 0x78, 0x04, 0x03,  // char. 89  Y
        0x61, 0x59, 0x49, 0x4D, 0x43,  // char. 90  Z
        0x00, 0x7F, 0x41, 0x41, 0x41,  // char. 91  [
        0x02, 0x04, 0x08, 0x10, 0x20,  // char. 92  \
        0x00, 0x41, 0x41, 0x41, 0x7F,  // char. 93  ]
        0x04, 0x02, 0x01, 0x02, 0x04,  // char. 94  ^
        0x40, 0x40, 0x40, 0x40, 0x40,  // char. 95  _
        0x00, 0x03, 0x07, 0x08, 0x00,  // char. 96  `
        0x20, 0x54, 0x54, 0x78, 0x40,  // char. 97  a
        0x7F, 0x28, 0x44, 0x44, 0x38,  // char. 98  b
        0x38, 0x44, 0x44, 0x44, 0x28,  // char. 99  c
        0x38, 0x44, 0x44, 0x28, 0x7F,  // char. 100 d
        0x38, 0x54, 0x54, 0x54, 0x18,  // char. 101 e
        0x00, 0x08, 0x7E, 0x09, 0x02,  // char. 102 f
        0x18, 0xA4, 0xA4, 0x9C, 0x78,  // char. 103 g
        0x7F, 0x08, 0x04, 0x04, 0x78,  // char. 104 h
        0x00, 0x44, 0x7D, 0x40, 0x00,  // char. 105 i
        0x20, 0x40, 0x40, 0x3D, 0x00,  // char. 106 j
        0x7F, 0x10, 0x28, 0x44, 0x00,  // char. 107 k
        0x00, 0x41, 0x7F, 0x40, 0x00,  // char. 108 l
        0x7C, 0x04, 0x78, 0x04, 0x78,  // char. 109 m
        0x7C, 0x08, 0x04, 0x04, 0x78,  // char. 110 n
        0x38, 0x44, 0x44, 0x44, 0x38,  // char. 111 o
        0xFC, 0x18, 0x24, 0x24, 0x18,  // char. 112 p
        0x18, 0x24, 0x24, 0x18, 0xFC,  // char. 113 q
        0x7C, 0x08, 0x04, 0x04, 0x08,  // char. 114 r
        0x48, 0x54, 0x54, 0x54, 0x24,  // char. 115 s
        0x04, 0x04, 0x3F, 0x44, 0x24,  // char. 116 t
        0x3C, 0x40, 0x40, 0x20, 0x7C,  // char. 117 u
        0x1C, 0x20, 0x40, 0x20, 0x1C,  // char. 118 v
        0x3C, 0x40, 0x30, 0x40, 0x3C,  // char. 119 w
        0x44, 0x28, 0x10, 0x28, 0x44,  // char. 120 x
        0x4C, 0x90, 0x90, 0x90, 0x7C,  // char. 121 y
        0x44, 0x64, 0x54, 0x4C, 0x44,  // char. 122 z
        0x00, 0x08, 0x36, 0x41, 0x00,  // char. 123 {
        0x00, 0x00, 0x77, 0x00, 0x00,  // char. 124 |
        0x00, 0x41, 0x36, 0x08, 0x00,  // char. 125 }
        0x02, 0x01, 0x02, 0x04, 0x02,  // char. 126 ~
        0x3C, 0x26, 0x23, 0x26, 0x3C,  // char. 127
        0x1E, 0xA1, 0xA1, 0x61, 0x12,  // char. 128
        0x3A, 0x40, 0x40, 0x20, 0x7A,  // char. 129
        0x38, 0x54, 0x54, 0x55, 0x59,  // char. 130
        0x21, 0x55, 0x55, 0x79, 0x41,  // char. 131
        0x22, 0x54, 0x54, 0x78, 0x42,  // char. 132
        0x21, 0x55, 0x54, 0x78, 0x40,  // char. 133
        0x20, 0x54, 0x55, 0x79, 0x40,  // char. 134
        0x0C, 0x1E, 0x52, 0x72, 0x12,  // char. 135
        0x39, 0x55, 0x55, 0x55, 0x59,  // char. 136
        0x39, 0x54, 0x54, 0x54, 0x59,  // char. 137
        0x39, 0x55, 0x54, 0x54, 0x58,  // char. 138
        0x00, 0x00, 0x45, 0x7C, 0x41,  // char. 139
        0x00, 0x02, 0x45, 0x7D, 0x42,  // char. 140
        0x00, 0x01, 0x45, 0x7C, 0x40,  // char. 141
        0x7D, 0x12, 0x11, 0x12, 0x7D,  // char. 142
        0xF0, 0x28, 0x25, 0x28, 0xF0,  // char. 143
        0x7C, 0x54, 0x55, 0x45, 0x00,  // char. 144
        0x20, 0x54, 0x54, 0x7C, 0x54,  // char. 145
        0x7C, 0x0A, 0x09, 0x7F, 0x49,  // char. 146
        0x32, 0x49, 0x49, 0x49, 0x32,  // char. 147
        0x3A, 0x44, 0x44, 0x44, 0x3A,  // char. 148
        0x32, 0x4A, 0x48, 0x48, 0x30,  // char. 149
        0x3A, 0x41, 0x41, 0x21, 0x7A,  // char. 150
        0x3A, 0x42, 0x40, 0x20, 0x78,  // char. 151
        0x00, 0x9D, 0xA0, 0xA0, 0x7D,  // char. 152
        0x3D, 0x42, 0x42, 0x42, 0x3D,  // char. 153
        0x3D, 0x40, 0x40, 0x40, 0x3D,  // char. 154
        0x3C, 0x24, 0xFF, 0x24, 0x24,  // char. 155
        0x48, 0x7E, 0x49, 0x43, 0x66,  // char. 156
        0x2B, 0x2F, 0xFC, 0x2F, 0x2B,  // char. 157
        0xFF, 0x09, 0x29, 0xF6, 0x20,  // char. 158
        0xC0, 0x88, 0x7E, 0x09, 0x03,  // char. 159
        0x20, 0x54, 0x54, 0x79, 0x41,  // char. 160
        0x00, 0x00, 0x44, 0x7D, 0x41,  // char. 161
        0x30, 0x48, 0x48, 0x4A, 0x32,  // char. 162
        0x38, 0x40, 0x40, 0x22, 0x7A,  // char. 163
        0x00, 0x7A, 0x0A, 0x0A, 0x72,  // char. 164
        0x7D, 0x0D, 0x19, 0x31, 0x7D,  // char. 165
        0x26, 0x29, 0x29, 0x2F, 0x28,  // char. 166
        0x26, 0x29, 0x29, 0x29, 0x26,  // char. 167
        0x30, 0x48, 0x4D, 0x40, 0x20,  // char. 168
        0x38, 0x08, 0x08, 0x08, 0x08,  // char. 169
        0x08, 0x08, 0x08, 0x08, 0x38,  // char. 170
        0x2F, 0x10, 0xC8, 0xAC, 0xBA,  // char. 171
        0x2F, 0x10, 0x28, 0x34, 0xFA,  // char. 172
        0x00, 0x00, 0x7B, 0x00, 0x00,  // char. 173
        0x08, 0x14, 0x2A, 0x14, 0x22,  // char. 174
        0x22, 0x14, 0x2A, 0x14, 0x08,  // char. 175
        0x55, 0x00, 0x55, 0x00, 0x55,  // char. 176
        0xAA, 0x55, 0xAA, 0x55, 0xAA,  // char. 177
        0xFF, 0x55, 0xFF, 0x55, 0xFF,  // char. 178
        0x00, 0x00, 0x00, 0xFF, 0x00,  // char. 179
        0x10, 0x10, 0x10, 0xFF, 0x00,  // char. 180
        0x14, 0x14, 0x14, 0xFF, 0x00,  // char. 181
        0x10, 0x10, 0xFF, 0x00, 0xFF,  // char. 182
        0x10, 0x10, 0xF0, 0x10, 0xF0,  // char. 183
        0x14, 0x14, 0x14, 0xFC, 0x00,  // char. 184
        0x14, 0x14, 0xF7, 0x00, 0xFF,  // char. 185
        0x00, 0x00, 0xFF, 0x00, 0xFF,  // char. 186
        0x14, 0x14, 0xF4, 0x04, 0xFC,  // char. 187
        0x14, 0x14, 0x17, 0x10, 0x1F,  // char. 188
        0x10, 0x10, 0x1F, 0x10, 0x1F,  // char. 189
        0x14, 0x14, 0x14, 0x1F, 0x00,  // char. 190
        0x10, 0x10, 0x10, 0xF0, 0x00,  // char. 191
        0x00, 0x00, 0x00, 0x1F, 0x10,  // char. 192
        0x10, 0x10, 0x10, 0x1F, 0x10,  // char. 193
        0x10, 0x10, 0x10, 0xF0, 0x10,  // char. 194
        0x00, 0x00, 0x00, 0xFF, 0x10,  // char. 195
        0x10, 0x10, 0x10, 0x10, 0x10,  // char. 196
        0x10, 0x10, 0x10, 0xFF, 0x10,  // char. 197
        0x00, 0x00, 0x00, 0xFF, 0x14,  // char. 198
        0x00, 0x00, 0xFF, 0x00, 0xFF,  // char. 199
        0x00, 0x00, 0x1F, 0x10, 0x17,  // char. 200
        0x00, 0x00, 0xFC, 0x04, 0xF4,  // char. 201
        0x14, 0x14, 0x17, 0x10, 0x17,  // char. 202
        0x14, 0x14, 0xF4, 0x04, 0xF4,  // char. 203
        0x00, 0x00, 0xFF, 0x00, 0xF7,  // char. 204
        0x14, 0x14, 0x14, 0x14, 0x14,  // char. 205
        0x14, 0x14, 0xF7, 0x00, 0xF7,  // char. 206
        0x14, 0x14, 0x14, 0x17, 0x14,  // char. 207
        0x10, 0x10, 0x1F, 0x10, 0x1F,  // char. 208
        0x14, 0x14, 0x14, 0xF4, 0x14,  // char. 209
        0x10, 0x10, 0xF0, 0x10, 0xF0,  // char. 210
        0x00, 0x00, 0x1F, 0x10, 0x1F,  // char. 211
        0x00, 0x00, 0x00, 0x1F, 0x14,  // char. 212
        0x00, 0x00, 0x00, 0xFC, 0x14,  // char. 213
        0x00, 0x00, 0xF0, 0x10, 0xF0,  // char. 214
        0x10, 0x10, 0xFF, 0x10, 0xFF,  // char. 215
        0x14, 0x14, 0x14, 0xFF, 0x14,  // char. 216
        0x10, 0x10, 0x10, 0x1F, 0x00,  // char. 217
        0x00, 0x00, 0x00, 0xF0, 0x10,  // char. 218
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // char. 219
        0xF0, 0xF0, 0xF0, 0xF0, 0xF0,  // char. 220
        0xFF, 0xFF, 0xFF, 0x00, 0x00,  // char. 221
        0x00, 0x00, 0x00, 0xFF, 0xFF,  // char. 222
        0x0F, 0x0F, 0x0F, 0x0F, 0x0F,  // char. 223
        0x38, 0x44, 0x44, 0x38, 0x44,  // char. 224
        0xFC, 0x4A, 0x4A, 0x4A, 0x34,  // char. 225
        0x7E, 0x02, 0x02, 0x06, 0x06,  // char. 226
        0x02, 0x7E, 0x02, 0x7E, 0x02,  // char. 227
        0x63, 0x55, 0x49, 0x41, 0x63,  // char. 228
        0x38, 0x44, 0x44, 0x3C, 0x04,  // char. 229
        0x40, 0x7E, 0x20, 0x1E, 0x20,  // char. 230
        0x06, 0x02, 0x7E, 0x02, 0x02,  // char. 231
        0x99, 0xA5, 0xE7, 0xA5, 0x99,  // char. 232
        0x1C, 0x2A, 0x49, 0x2A, 0x1C,  // char. 233
        0x4C, 0x72, 0x01, 0x72, 0x4C,  // char. 234
        0x30, 0x4A, 0x4D, 0x4D, 0x30,  // char. 235
        0x30, 0x48, 0x78, 0x48, 0x30,  // char. 236
        0xBC, 0x62, 0x5A, 0x46, 0x3D,  // char. 237
        0x3E, 0x49, 0x49, 0x49, 0x00,  // char. 238
        0x7E, 0x01, 0x01, 0x01, 0x7E,  // char. 239
        0x2A, 0x2A, 0x2A, 0x2A, 0x2A,  // char. 240
        0x44, 0x44, 0x5F, 0x44, 0x44,  // char. 241
        0x40, 0x51, 0x4A, 0x44, 0x40,  // char. 242
        0x40, 0x44, 0x4A, 0x51, 0x40,  // char. 243
        0x00, 0x00, 0xFF, 0x01, 0x03,  // char. 244
        0xE0, 0x80, 0xFF, 0x00, 0x00,  // char. 245
        0x08, 0x08, 0x6B, 0x6B, 0x08,  // char. 246
        0x36, 0x12, 0x36, 0x24, 0x36,  // char. 247
        0x06, 0x0F, 0x09, 0x0F, 0x06,  // char. 248
        0x00, 0x00, 0x18, 0x18, 0x00,  // char. 249
        0x00, 0x00, 0x10, 0x10, 0x00,  // char. 250
        0x30, 0x40, 0xFF, 0x01, 0x01,  // char. 251
        0x00, 0x1F, 0x01, 0x01, 0x1E,  // char. 252
        0x00, 0x19, 0x1D, 0x17, 0x12,  // char. 253
        0x00, 0x3C, 0x3C, 0x3C, 0x3C,  // char. 254
        0x00, 0x00, 0x00, 0x00, 0x00   // char. 255
    ]);


    function bitmap_to_sprite_byte_as_row(char_code) {
        // Treats byte as entire row
        const index = char_code * 5;
        const texel = new Uint8Array(BITMAP_WIDTH * BITMAP_HEIGHT);
        console.log('Bitmap:');
        // iter. each byte
        let i = 0;
        for (let y = 0; y < BITMAP_HEIGHT; y++) {
            const byte = packed_bitmap[index + y];
            // iter. each bit
            let bitmap_width_ix = BITMAP_WIDTH - 1;
            for (let x = bitmap_width_ix; x > -1; x--) {
                let bit_is_set = (byte >> x) & 1;
                let pixel_value = bit_is_set ? 255 : 0;
                texel[i++] = pixel_value;
            }
        }
        return texel;
    }

    function bitmap_to_sprite_t_flipv(char_code) {
        // Reads bitmap as mat -> T -> flip_v
        const index = char_code * 5;
        const texel = new Uint8Array(BITMAP_WIDTH * BITMAP_HEIGHT);
        // iter. each byte
        let i = 0;
        let bw = BITMAP_WIDTH - 1;
        // for (let x = bw; x > -1; x--) {
        for (let x = 0; x < bw + 1; x++) {
            // iter. each bit
            for (let y = 0; y < BITMAP_HEIGHT; y++) {
                const byte = packed_bitmap[index + y];
                let bit_is_set = (byte >> x) & 1;
                let pixel_value = bit_is_set ? 255 : 0;
                texel[i++] = pixel_value;
            }
        }
        return texel;
    }

    function read_strided(matrix, shape, stride) {
        const [h, w] = shape;
        const [yd, xd] = stride;
        for (let y = 0; y < h; y++) {
            let line = '';
            for (let x = 0; x < w; x++) {
                let rc = y * yd + x * xd;
                let val = matrix[rc] === 255 ? 1 : 0;
                line += val;
            }
            console.log(line);
        }
    }

    function pp(matrix, width = SPRITE_WIDTH, height = SPRITE_HEIGHT) {
        for (let y = 0; y < height; y++) {
            let line = '';
            for (let x = 0; x < width; x++) {
                let rc = y * width + x;
                let val = matrix[rc] === 255 ? 1 : 0;
                line += val;
            }
            console.log(line);
        }
    }

    function print(char_code) {
        let output = `Character: ${String.fromCharCode(char_code)} (ASCII ${char_code})\n`;
        // let texel = bitmap_to_texel_t_flipv(char_code);
        let texel = bitmap_to_sprite_t_flipv(char_code);
        console.log(output);
        pp(texel, SPRITE_WIDTH, SPRITE_HEIGHT);
    }

    let sprite_size = SPRITE_WIDTH * SPRITE_HEIGHT;
    let sprite_sheet = new Uint8Array((to - from) * sprite_size);
    for (let i = from; i < to; i++) {
        sprite_sheet.set(bitmap_to_sprite_t_flipv(i), i * sprite_size);
    }

    return {
        sprite_data: sprite_sheet,
        sprite_width: SPRITE_WIDTH,
        sprite_height: SPRITE_HEIGHT,
        print_sprite: pp,
        at: (char_code) => sprite_sheet.slice(sprite_size * char_code, sprite_size * (char_code + 1)),
    }
}

// const sprite_sheet = make_ascii_sprite_sheet(0, 128);
// sprite_sheet.print_sprite(sprite_sheet.at(109));
